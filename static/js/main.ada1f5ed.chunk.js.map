{"version":3,"sources":["components/Welcome.js","components/Header.js","components/Form.js","utils/firebase.js","components/Edit.js","components/Task.js","components/Main.js","components/App.js","serviceWorker.js","index.js"],"names":["Welcome","props","className","type","onClick","enterButtonClicked","Header","Form","htmlFor","id","placeholder","onChange","event","inputVal","value","userInputState","handleClick","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Edit","editInputValue","editHandleChange","saveTask","defaultValue","Task","setState","editingInputValue","target","removeTask","referenceToDb","task","ref","child","remove","editTask","taskValue","editing","state","set","this","dbRefInfo","taskKey","Component","Main","handleChange","userInput","preventDefault","database","push","alert","tasks","on","response","newState","data","val","key","map","App","toggleEnteredState","notEntered","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ada1f5ed.chunk.js","sourcesContent":["import React from 'react';\n\n// stateless component\nconst Welcome = (props) => {\n  return (\n    <header className=\"welcomeHeaderContainer\">\n      <div className=\"welcomeContentContainer\">\n        <h1 className=\"welcomeHeader\">Jello</h1>\n\n        <p>Welcome to Jello!</p>\n        <p>A Trello like task board!  Create, view, update, and delete items to keep you organized and focused on the most important tasks</p>\n\n        <button type=\"button\" onClick={ () => {props.enterButtonClicked()} }>Get Tasking!</button>\n      </div>\n    </header>\n  )\n}\n\nexport default Welcome;","import React from 'react';\n\n\n// stateless component\nfunction Header() {\n  return (\n    <header className=\"mainAppHeader\">\n      <h1>Jello</h1>\n    </header>\n  )\n}\n\nexport default Header;","import React from 'react';\n\n// stateless component\nconst Form = (props) => {\n  return (\n    <form className=\"mainForm\">\n      <label htmlFor=\"taskInput\" className=\"srOnly\"></label>\n      <input \n        type=\"text\" \n        id=\"taskInput\" \n        className=\"taskInput\" \n        placeholder=\"Input Task Here...\"\n        onChange={ (event) => {props.inputVal(event)} }\n        value={props.userInputState}\n      >\n      </input>\n      <button type=\"submit\" onClick={ (event) => {props.handleClick(event)} }>Add Task</button>\n    </form>\n  )\n};\n\nexport default Form;","import firebase from 'firebase';\n\n// Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDvmCIhenNay49FjRf5eq0z08sTop651uQ\",\n  authDomain: \"jello-database.firebaseapp.com\",\n  databaseURL: \"https://jello-database.firebaseio.com\",\n  projectId: \"jello-database\",\n  storageBucket: \"jello-database.appspot.com\",\n  messagingSenderId: \"954320055794\",\n  appId: \"1:954320055794:web:006031744c1a0e4957cf6b\"\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React, { Fragment } from 'react';\n\n\n// stateless component\n// props destructured\nfunction Edit({ editInputValue, editHandleChange, saveTask }) {\n  return (\n    <Fragment>\n      <form>\n        <input \n          defaultValue={editInputValue}\n          onChange={editHandleChange}\n        >\n        </input>\n        <button className=\"saveButton editModeButton\" type=\"submit\" onClick={saveTask}>Save</button>\n      </form>\n    </Fragment>\n  )\n}\n\nexport default Edit;","import React, { Component, Fragment } from 'react';\nimport Edit from './Edit.js';\n\n\nclass Task extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      editing: false,\n      editingInputValue: '',\n    };\n  }\n\n  \n  // fires each time a user inputs a value into the input field when editing a task\n  editHandleChange = (event) => {\n    this.setState({\n      editingInputValue: event.target.value,\n    })\n  }\n\n\n  // function to remove item\n  removeTask = (referenceToDb, task) => {\n    referenceToDb.ref().child(task).remove();\n  }\n\n\n  // function to edit task item - fires when edit button is clicked\n  editTask = (taskValue) => {\n\n    this.setState({\n      editing: !this.state.editing,\n      editingInputValue: taskValue,\n    })\n  }\n\n\n  // save task function - fires when save button is clicked in \"editing\" mode\n  saveTask = (referenceToDb, task) => {\n    // reference to our database but reference to the specific task item we want to update the value of\n    const taskItemInDb = referenceToDb.ref(task);\n    // updating the task value in our database to the value that's in our editingInput state\n    taskItemInDb.set(this.state.editingInputValue);\n\n    // update state and initiate re-render\n    this.setState({\n      editing: !this.state.editing,\n      editingInputValue: '',\n    })\n  } \n\n\n  render() {\n    return (\n      <Fragment>\n        { this.state.editing ? \n          <Edit \n            editInputValue={this.state.editingInputValue}\n            editHandleChange={this.editHandleChange}\n            saveTask={ () => {this.saveTask(this.props.dbRefInfo, this.props.taskKey)} }\n          /> :\n          <Fragment>\n            <p>{this.props.taskValue}</p> \n            <div className=\"editDeleteContainer\">\n              <button \n                type=\"button\" \n                onClick={ () => {this.editTask(this.props.taskValue)} }>edit</button>\n              \n              <button \n                type=\"button\" \n                onClick={ () => {this.removeTask(this.props.dbRefInfo, this.props.taskKey)} }\n              >\n                delete\n              </button>\n            </div>\n          </Fragment> }\n      </Fragment>\n    )\n  }\n}\n\nexport default Task;","import React, { Component } from 'react';\nimport Form from './Form.js';\nimport firebase from '../utils/firebase.js';\nimport Task from './Task.js';\n\n\nclass Main extends Component {\n  constructor() {\n    super()\n\n    this.state = {\n      tasks: [],\n      userInput: '',\n    }\n  }\n\n\n  // componentDidMount lifecycle method which executes once component mounts\n  // this allows us to sync the items in our database to our app (and therefore our UI)\n  componentDidMount() {\n    const dbRef = firebase.database().ref();\n\n    // event listener that fires anytime there is a change in the database\n    dbRef.on('value', (response) => {\n      const newState = [];\n      const data = response.val();\n\n      // for in loop to access each task item in our data object and push each task item to our new state array\n      for (let key in data) {\n        newState.push({key: key, value: data[key]});\n      }\n\n      // execute setState to initiate re-render which will update our page with task items in database (current and new ones (if there are any new ones) )\n      this.setState({\n        tasks: newState,\n      })\n    });\n  }\n\n\n  // fires each time a user inputs a value into main input when adding a task\n  // used to keep track of the values entered\n  handleChange = (event) => {\n    this.setState({\n      userInput: event.target.value,\n    })\n  }\n  \n\n  // when the add task button is clicked this will add item to the database and also update the screen due to the .on method we have that fires each time the database is changed\n  handleClick = (event) => {\n    // prevent default action on form submission\n    event.preventDefault();\n\n    // error handling if input field is blank\n    if (this.state.userInput) {\n      // reference to database\n      const dbRef = firebase.database().ref();\n      // whatever value is in state for userInput on submission/button click, we want to add this to our database\n      dbRef.push(this.state.userInput);\n      // reset state of input so it's blank\n      this.setState({\n        userInput: '',\n      })\n    } else {\n      alert(`input cannot be left blank - please enter a task`);\n    }\n  }\n\n\n  render() {\n    return(\n      <main>\n        <div className=\"wrapper\">\n          <div className=\"scrollWrapper\">\n            <section className=\"cardContainer\">\n              <h2>Task List</h2>\n              { this.state.tasks.map((task) => {\n                return (\n                  <div key={task.key} className=\"taskItem\">\n                    <Task \n                      dbRefInfo={firebase.database()}\n                      taskValue={task.value}\n                      taskKey={task.key}\n                    />\n                  </div>\n                )\n              }) }\n            </section>\n\n            {/* One of my stretch goals was to include the functionality to move each task to a different column - I decided to stick to the MVP for this project and will work on this feature afterwards */}\n            <section className=\"cardContainer\">\n              <h2>In Progress</h2>\n            </section>\n\n            <section className=\"cardContainer\">\n              <h2>Done</h2>\n            </section>\n          </div>\n        </div>\n\n        <Form \n          inputVal={this.handleChange} \n          userInputState={this.state.userInput} \n          handleClick={this.handleClick}\n        />\n      </main>\n    )\n  }\n}\n\nexport default Main;","import React, { Component, Fragment } from 'react';\nimport Welcome from './Welcome.js';\nimport Header from './Header.js';\nimport Main from './Main.js';\n\n\nclass App extends Component {\n  constructor() {\n    super()\n\n    this.state = {\n      notEntered: true,\n    }\n  }\n\n\n  toggleEnteredState = () => {\n    this.setState({\n      notEntered: !this.state.notEntered\n    })\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        {\n          this.state.notEntered \n            ? <Welcome enterButtonClicked={this.toggleEnteredState} /> \n            : <Fragment>\n                <Header />\n                <Main />\n              </Fragment>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}