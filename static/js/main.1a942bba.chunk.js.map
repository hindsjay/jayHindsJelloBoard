{"version":3,"sources":["components/Welcome.js","components/Header.js","components/Form.js","utils/firebase.js","components/Main.js","components/App.js","serviceWorker.js","index.js"],"names":["Welcome","props","className","type","onClick","enterButtonClicked","Header","Form","htmlFor","id","placeholder","onChange","event","inputVal","value","userInputState","handleClick","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Main","handleChange","setState","userInput","target","editHandleChange","editingInput","preventDefault","database","ref","push","state","removeTask","task","child","remove","editTask","taskKey","inputValue","tasks","forEach","taskItem","key","editing","updatedTasksState","saveTask","editingKey","console","log","set","editInput","React","createRef","on","response","newState","data","val","list","this","map","defaultValue","moveTask","Component","App","toggleEnteredState","notEntered","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1a942bba.chunk.js","sourcesContent":["import React from 'react';\n\n// stateless component\nconst Welcome = (props) => {\n  return (\n    <header className=\"welcomeHeaderContainer\">\n      <div className=\"welcomeContentContainer\">\n        <h1 className=\"welcomeHeader\">Title</h1>\n\n        <p>Welcome to Title!</p>\n        <p>A Trello like task board to keep you organized and focused on the most important tasks</p>\n\n        <button type=\"button\" onClick={ () => {props.enterButtonClicked()} }>Enter</button>\n      </div>\n    </header>\n  )\n}\n\nexport default Welcome;","import React from 'react';\n\n// stateless component\nconst Header = () => {\n  return (\n    <header className=\"mainAppHeader\">\n      <h1>Title</h1>\n      <div className=\"subHeader wrapper\">\n        <p>Jay Hinds</p>\n        <button>Menu</button>\n      </div>\n    </header>\n  )\n}\n\nexport default Header;","import React from 'react';\n\n// stateless component\nconst Form = (props) => {\n  return (\n    <form>\n      <label htmlFor=\"taskInput\" className=\"srOnly\"></label>\n      <input \n        type=\"text\" \n        id=\"taskInput\" \n        className=\"taskInput\" \n        placeholder=\"Input Task Here...\"\n        onChange={ (event) => {props.inputVal(event)} }\n        value={props.userInputState}\n      >\n      </input>\n      <button type=\"submit\" onClick={ (event) => {props.handleClick(event)} }>Add Task</button>\n    </form>\n  )\n};\n\nexport default Form;","import firebase from 'firebase';\n\n// Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDvmCIhenNay49FjRf5eq0z08sTop651uQ\",\n  authDomain: \"jello-database.firebaseapp.com\",\n  databaseURL: \"https://jello-database.firebaseio.com\",\n  projectId: \"jello-database\",\n  storageBucket: \"jello-database.appspot.com\",\n  messagingSenderId: \"954320055794\",\n  appId: \"1:954320055794:web:006031744c1a0e4957cf6b\"\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React, { Component, Fragment } from 'react';\nimport Form from './Form.js';\nimport firebase from '../utils/firebase.js';\n\n\nclass Main extends Component {\n  constructor() {\n    super()\n\n    this.editInput = React.createRef();\n\n    this.state = {\n      tasks: [],\n      userInput: '',\n      editingInput: '',\n    }\n  }\n\n\n  componentDidMount() {\n    const dbRef = firebase.database().ref();\n\n    // event listener that fires anytime there is a change in the database\n    dbRef.on('value', (response) => {\n      const newState = [];\n      const data = response.val();\n      console.log(data);\n\n      // for in loop to access each task item in our data object and push each task item to our new state array\n      for (let key in data) {\n        newState.push({key: key, value: data[key], editing: false, list: 'initial'});\n      }\n\n      // execute setState to initiate re-render which will update our page with the task items that have been added to state\n      this.setState({\n        tasks: newState,\n      })\n    });\n  }\n\n\n  handleChange = (event) => {\n    this.setState({\n      userInput: event.target.value,\n    })\n  }\n\n\n  editHandleChange = (event) => {\n    this.setState({\n      editingInput: event.target.value,\n    })\n  }\n\n\n  handleClick = (event) => {\n    // prevent default action on form submission\n    event.preventDefault();\n    // reference to database\n    const dbRef = firebase.database().ref();\n    // whatever value is in state for userInput on submission/button click, we want to add this to our database\n    dbRef.push(this.state.userInput);\n    // reset state of input so it's blank\n    this.setState({\n      userInput: '',\n    })\n  }\n\n\n  removeTask = (task) => {\n    // reference our database\n    const dbRef = firebase.database().ref();\n    // remove the task item of choice from database, which also results in the screen being updated due to the .on() method we initialized in the componentDidMount method\n    dbRef.child(task).remove();\n  }\n\n\n  editTask = (taskKey) => {\n    let inputValue;\n    this.state.tasks.forEach((taskItem) => {\n      if (taskItem.key === taskKey) {\n        taskItem.editing = !taskItem.editing;\n        inputValue = taskItem.value;\n      }\n    });\n\n    const updatedTasksState = [...this.state.tasks];\n\n    this.setState({\n      tasks: updatedTasksState,\n      editingInput: inputValue,\n    })\n\n    // this.editInput.current.focus();\n  }\n\n\n  saveTask = () => {\n    let editingKey;\n    console.log(this.state.tasks);\n    this.state.tasks.forEach((task) => {\n      if (task.editing) {\n        task.editing = !task.editing;\n        task.value = this.state.editingInput;\n        editingKey = task.key;\n      }\n    });\n\n    const updatedTasksState = [...this.state.tasks];\n\n    const dbRef = firebase.database().ref(editingKey);\n    \n    dbRef.set(this.state.editingInput);\n\n    this.setState({\n      tasks: updatedTasksState,\n      editingInput: '',\n    })\n  }\n\n\n  // moveTask = () => {\n\n  // }\n\n\n  render() {\n    return(\n      <main>\n        <div className=\"wrapper\">\n          <div className=\"scrollWrapper\">\n            <section className=\"cardContainer\">\n              <h2>Task List</h2>\n              <div className=\"taskItemContainer\">\n              {\n                this.state.tasks.map((task) => {\n                  return (\n                    <div key={task.key} className=\"taskItem\">\n                      { task.editing === false ? \n                        <Fragment>\n                          <p>{task.value}</p> \n                          <div className=\"editDeleteContainer\">\n                            <button type=\"button\" onClick={ () => {this.editTask(task.key)} }>edit</button>\n                            <button type=\"button\" onClick={ () => {this.removeTask(task.key)} }>delete</button>\n                          </div>\n                        </Fragment>\n                        :\n                        <Fragment>\n                          <input \n                            ref={this.editInput} \n                            defaultValue={this.state.editingInput}\n                            onChange={this.editHandleChange}\n                          >\n                          </input>\n                          <button className=\"saveButton editModeButton\" type=\"button\" onClick={this.saveTask}>Save</button>\n                          <button className=\"moveButton editModeButton\" type=\"button\" onClick={this.moveTask}>Move</button> \n                        </Fragment>\n                      }\n                    </div>\n                  )\n                })\n              }\n              </div>\n            </section>\n\n            <section className=\"cardContainer\">\n              <h2>In Progress</h2>\n            </section>\n\n            <section className=\"cardContainer\">\n              <h2>Done</h2>\n            </section>\n          </div>\n        </div>\n\n        <Form \n          inputVal={this.handleChange} \n          userInputState={this.state.userInput} \n          handleClick={this.handleClick}\n        />\n      </main>\n    )\n  }\n}\n\nexport default Main;","import React, { Component, Fragment } from 'react';\nimport Welcome from './Welcome.js';\nimport Header from './Header.js';\nimport Main from './Main.js';\n\n\nclass App extends Component {\n  constructor() {\n    super()\n\n    this.state = {\n      notEntered: true,\n    }\n  }\n\n\n  toggleEnteredState = () => {\n\n    this.setState({\n      notEntered: !this.state.notEntered\n    })\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        {\n          this.state.notEntered \n            ? <Welcome enterButtonClicked={this.toggleEnteredState} /> \n            : <Fragment>\n                <Header />\n                <Main />\n              </Fragment>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}